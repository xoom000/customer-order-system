{"ast":null,"code":"// API configuration\nconst API_BASE_URL='https://route33.app/api';/**\n * API Service for interacting with the Linen Service API\n */const ApiService={/**\n   * Fetch route requirements for a specific route and day\n   * @param {number} routeNum - Route number\n   * @param {string} dayOfWeek - Day of the week (e.g., \"Monday\")\n   * @returns {Promise} Promise resolving to route data\n   */async getRouteRequirements(routeNum,dayOfWeek){try{const response=await fetch(`${API_BASE_URL}/routes/${routeNum}/${dayOfWeek}`);if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error fetching route requirements:',error);throw error;}},/**\n   * Fetch customer breakdown for a specific route and day\n   * @param {number} routeNum - Route number\n   * @param {string} dayOfWeek - Day of the week (e.g., \"Monday\")\n   * @returns {Promise} Promise resolving to customer breakdown data\n   */async getRouteCustomerBreakdown(routeNum,dayOfWeek){try{const response=await fetch(`${API_BASE_URL}/routes/${routeNum}/${dayOfWeek}/customers`);if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error fetching route customer breakdown:',error);throw error;}},/**\n   * Search for customers\n   * @param {string} query - Search term\n   * @param {number} page - Page number for pagination\n   * @returns {Promise} Promise resolving to customer search results\n   */async searchCustomers(query){let page=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;try{const response=await fetch(`${API_BASE_URL}/customers/search?q=${encodeURIComponent(query)}&page=${page}`);if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error searching customers:',error);throw error;}},/**\n   * Search for items\n   * @param {string} query - Search term\n   * @returns {Promise} Promise resolving to item search results\n   */async searchItems(query){try{const response=await fetch(`${API_BASE_URL}/items/search?q=${encodeURIComponent(query)}`);if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error searching items:',error);throw error;}},/**\n   * Get details for a specific item\n   * @param {number} itemNumber - Item ID number\n   * @returns {Promise} Promise resolving to item details\n   */async getItemDetails(itemNumber){try{const response=await fetch(`${API_BASE_URL}/items/${itemNumber}`);if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error fetching item details:',error);throw error;}},/**\n   * Add a new route stop\n   * @param {Object} routeData - Route data object\n   * @returns {Promise} Promise resolving to response data\n   */async addRouteStop(routeData){try{const response=await fetch(`${API_BASE_URL}/routes/add`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(routeData)});if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error adding route stop:',error);throw error;}},/**\n   * Update an existing route stop\n   * @param {Object} routeData - Route data object\n   * @returns {Promise} Promise resolving to response data\n   */async updateRouteStop(routeData){try{const response=await fetch(`${API_BASE_URL}/routes/update`,{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(routeData)});if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error updating route stop:',error);throw error;}},/**\n   * Delete a route stop\n   * @param {Object} routeData - Route data for the stop to delete\n   * @returns {Promise} Promise resolving to response data\n   */async deleteRouteStop(routeData){try{const response=await fetch(`${API_BASE_URL}/routes/delete`,{method:'DELETE',headers:{'Content-Type':'application/json'},body:JSON.stringify(routeData)});if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error deleting route stop:',error);throw error;}},/**\n   * Check the health status of the API\n   * @returns {Promise} Promise resolving to health status\n   */async checkHealth(){try{const response=await fetch(`${API_BASE_URL}/health`);if(!response.ok){throw new Error(`API Error: ${response.status}`);}return await response.json();}catch(error){console.error('Error checking API health:',error);throw error;}}};export default ApiService;","map":{"version":3,"names":["API_BASE_URL","ApiService","getRouteRequirements","routeNum","dayOfWeek","response","fetch","ok","Error","status","json","error","console","getRouteCustomerBreakdown","searchCustomers","query","page","arguments","length","undefined","encodeURIComponent","searchItems","getItemDetails","itemNumber","addRouteStop","routeData","method","headers","body","JSON","stringify","updateRouteStop","deleteRouteStop","checkHealth"],"sources":["/home/xoom000/website/src/services/api.js"],"sourcesContent":["// API configuration\nconst API_BASE_URL = 'https://route33.app/api';\n\n/**\n * API Service for interacting with the Linen Service API\n */\nconst ApiService = {\n  /**\n   * Fetch route requirements for a specific route and day\n   * @param {number} routeNum - Route number\n   * @param {string} dayOfWeek - Day of the week (e.g., \"Monday\")\n   * @returns {Promise} Promise resolving to route data\n   */\n  async getRouteRequirements(routeNum, dayOfWeek) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/routes/${routeNum}/${dayOfWeek}`);\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching route requirements:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Fetch customer breakdown for a specific route and day\n   * @param {number} routeNum - Route number\n   * @param {string} dayOfWeek - Day of the week (e.g., \"Monday\")\n   * @returns {Promise} Promise resolving to customer breakdown data\n   */\n  async getRouteCustomerBreakdown(routeNum, dayOfWeek) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/routes/${routeNum}/${dayOfWeek}/customers`);\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching route customer breakdown:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Search for customers\n   * @param {string} query - Search term\n   * @param {number} page - Page number for pagination\n   * @returns {Promise} Promise resolving to customer search results\n   */\n  async searchCustomers(query, page = 1) {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/customers/search?q=${encodeURIComponent(query)}&page=${page}`\n      );\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching customers:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Search for items\n   * @param {string} query - Search term\n   * @returns {Promise} Promise resolving to item search results\n   */\n  async searchItems(query) {\n    try {\n      const response = await fetch(\n        `${API_BASE_URL}/items/search?q=${encodeURIComponent(query)}`\n      );\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error searching items:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Get details for a specific item\n   * @param {number} itemNumber - Item ID number\n   * @returns {Promise} Promise resolving to item details\n   */\n  async getItemDetails(itemNumber) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/items/${itemNumber}`);\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error fetching item details:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Add a new route stop\n   * @param {Object} routeData - Route data object\n   * @returns {Promise} Promise resolving to response data\n   */\n  async addRouteStop(routeData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/routes/add`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(routeData),\n      });\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error adding route stop:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Update an existing route stop\n   * @param {Object} routeData - Route data object\n   * @returns {Promise} Promise resolving to response data\n   */\n  async updateRouteStop(routeData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/routes/update`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(routeData),\n      });\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error updating route stop:', error);\n      throw error;\n    }\n  },\n\n  /**\n   * Delete a route stop\n   * @param {Object} routeData - Route data for the stop to delete\n   * @returns {Promise} Promise resolving to response data\n   */\n  async deleteRouteStop(routeData) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/routes/delete`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(routeData),\n      });\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error deleting route stop:', error);\n      throw error;\n    }\n  },\n  \n  /**\n   * Check the health status of the API\n   * @returns {Promise} Promise resolving to health status\n   */\n  async checkHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/health`);\n      if (!response.ok) {\n        throw new Error(`API Error: ${response.status}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Error checking API health:', error);\n      throw error;\n    }\n  }\n};\n\nexport default ApiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}