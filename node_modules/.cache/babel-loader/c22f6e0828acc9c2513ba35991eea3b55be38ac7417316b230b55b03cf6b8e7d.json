{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import ApiService from'../services/api';import{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=/*#__PURE__*/createContext();export const AppProvider=_ref=>{let{children}=_ref;// State variables\nconst[customers,setCustomers]=useState([]);const[customerProducts,setCustomerProducts]=useState({});const[routes,setRoutes]=useState([]);const[apiStatus,setApiStatus]=useState({isLoading:true,isError:false});const[notifications,setNotifications]=useState([]);// Load initial data\nuseEffect(()=>{checkApiHealth();},[]);// Check API health\nconst checkApiHealth=async()=>{try{const health=await ApiService.checkHealth();setApiStatus({isLoading:false,isError:false,status:health.status,database:health.database});}catch(error){setApiStatus({isLoading:false,isError:true,error:error.message});addNotification({type:'error',message:'Failed to connect to the API server. Please check your connection.'});}};// Add a notification\nconst addNotification=notification=>{const id=Date.now();setNotifications(prev=>[...prev,{...notification,id}]);// Auto-remove notification after 5 seconds\nsetTimeout(()=>{setNotifications(prev=>prev.filter(n=>n.id!==id));},5000);};// Customer methods\nconst addCustomer=customer=>{setCustomers(prev=>[...prev,customer]);setCustomerProducts(prev=>({...prev,[customer.id]:[]}));addNotification({type:'success',message:`Customer \"${customer.name}\" added successfully.`});};const updateCustomer=(customerId,updatedData)=>{setCustomers(prev=>prev.map(customer=>customer.id===customerId?{...customer,...updatedData}:customer));addNotification({type:'success',message:'Customer updated successfully.'});};const deleteCustomer=customerId=>{setCustomers(prev=>prev.filter(customer=>customer.id!==customerId));const{[customerId]:_,...remainingProducts}=customerProducts;setCustomerProducts(remainingProducts);addNotification({type:'success',message:'Customer deleted successfully.'});};// Route methods\nconst fetchRouteRequirements=async(routeNum,dayOfWeek)=>{try{const data=await ApiService.getRouteRequirements(routeNum,dayOfWeek);return data;}catch(error){addNotification({type:'error',message:`Error loading route ${routeNum}: ${error.message}`});throw error;}};const fetchRouteCustomers=async(routeNum,dayOfWeek)=>{try{const data=await ApiService.getRouteCustomerBreakdown(routeNum,dayOfWeek);return data;}catch(error){addNotification({type:'error',message:`Error loading customers for route ${routeNum}: ${error.message}`});throw error;}};// Product methods\nconst updateCustomerProducts=(customerId,products)=>{setCustomerProducts(prev=>({...prev,[customerId]:products}));addNotification({type:'success',message:`Updated ${products.length} products for customer.`});};const searchItems=async query=>{try{return await ApiService.searchItems(query);}catch(error){addNotification({type:'error',message:`Error searching items: ${error.message}`});throw error;}};// Route stop management\nconst addRouteStop=async routeData=>{try{const result=await ApiService.addRouteStop(routeData);addNotification({type:'success',message:`Added new stop to route ${routeData.route}.`});return result;}catch(error){addNotification({type:'error',message:`Error adding route stop: ${error.message}`});throw error;}};const updateRouteStop=async routeData=>{try{const result=await ApiService.updateRouteStop(routeData);addNotification({type:'success',message:`Updated stop on route ${routeData.route}.`});return result;}catch(error){addNotification({type:'error',message:`Error updating route stop: ${error.message}`});throw error;}};const deleteRouteStop=async routeData=>{try{const result=await ApiService.deleteRouteStop(routeData);addNotification({type:'success',message:`Removed stop from route ${routeData.route}.`});return result;}catch(error){addNotification({type:'error',message:`Error deleting route stop: ${error.message}`});throw error;}};return/*#__PURE__*/_jsx(AppContext.Provider,{value:{// API status\napiStatus,checkApiHealth,// Notifications\nnotifications,addNotification,// Customer data\ncustomers,addCustomer,updateCustomer,deleteCustomer,// Product data\ncustomerProducts,updateCustomerProducts,searchItems,// Route data\nroutes,fetchRouteRequirements,fetchRouteCustomers,addRouteStop,updateRouteStop,deleteRouteStop},children:children});};export const useApp=()=>useContext(AppContext);","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","ApiService","jsx","_jsx","AppContext","AppProvider","_ref","children","customers","setCustomers","customerProducts","setCustomerProducts","routes","setRoutes","apiStatus","setApiStatus","isLoading","isError","notifications","setNotifications","checkApiHealth","health","checkHealth","status","database","error","message","addNotification","type","notification","id","Date","now","prev","setTimeout","filter","n","addCustomer","customer","name","updateCustomer","customerId","updatedData","map","deleteCustomer","_","remainingProducts","fetchRouteRequirements","routeNum","dayOfWeek","data","getRouteRequirements","fetchRouteCustomers","getRouteCustomerBreakdown","updateCustomerProducts","products","length","searchItems","query","addRouteStop","routeData","result","route","updateRouteStop","deleteRouteStop","Provider","value","useApp"],"sources":["/home/xoom000/website/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport ApiService from '../services/api';\n\nconst AppContext = createContext();\n\nexport const AppProvider = ({ children }) => {\n  // State variables\n  const [customers, setCustomers] = useState([]);\n  const [customerProducts, setCustomerProducts] = useState({});\n  const [routes, setRoutes] = useState([]);\n  const [apiStatus, setApiStatus] = useState({ isLoading: true, isError: false });\n  const [notifications, setNotifications] = useState([]);\n\n  // Load initial data\n  useEffect(() => {\n    checkApiHealth();\n  }, []);\n\n  // Check API health\n  const checkApiHealth = async () => {\n    try {\n      const health = await ApiService.checkHealth();\n      setApiStatus({ \n        isLoading: false, \n        isError: false, \n        status: health.status,\n        database: health.database \n      });\n    } catch (error) {\n      setApiStatus({ \n        isLoading: false, \n        isError: true, \n        error: error.message \n      });\n      addNotification({ \n        type: 'error', \n        message: 'Failed to connect to the API server. Please check your connection.' \n      });\n    }\n  };\n\n  // Add a notification\n  const addNotification = (notification) => {\n    const id = Date.now();\n    setNotifications(prev => [...prev, { ...notification, id }]);\n    \n    // Auto-remove notification after 5 seconds\n    setTimeout(() => {\n      setNotifications(prev => prev.filter(n => n.id !== id));\n    }, 5000);\n  };\n\n  // Customer methods\n  const addCustomer = (customer) => {\n    setCustomers(prev => [...prev, customer]);\n    setCustomerProducts(prev => ({ ...prev, [customer.id]: [] }));\n    addNotification({ \n      type: 'success', \n      message: `Customer \"${customer.name}\" added successfully.` \n    });\n  };\n\n  const updateCustomer = (customerId, updatedData) => {\n    setCustomers(prev => \n      prev.map(customer => \n        customer.id === customerId ? { ...customer, ...updatedData } : customer\n      )\n    );\n    addNotification({ \n      type: 'success', \n      message: 'Customer updated successfully.' \n    });\n  };\n\n  const deleteCustomer = (customerId) => {\n    setCustomers(prev => prev.filter(customer => customer.id !== customerId));\n    const { [customerId]: _, ...remainingProducts } = customerProducts;\n    setCustomerProducts(remainingProducts);\n    addNotification({ \n      type: 'success', \n      message: 'Customer deleted successfully.' \n    });\n  };\n\n  // Route methods\n  const fetchRouteRequirements = async (routeNum, dayOfWeek) => {\n    try {\n      const data = await ApiService.getRouteRequirements(routeNum, dayOfWeek);\n      return data;\n    } catch (error) {\n      addNotification({ \n        type: 'error', \n        message: `Error loading route ${routeNum}: ${error.message}` \n      });\n      throw error;\n    }\n  };\n\n  const fetchRouteCustomers = async (routeNum, dayOfWeek) => {\n    try {\n      const data = await ApiService.getRouteCustomerBreakdown(routeNum, dayOfWeek);\n      return data;\n    } catch (error) {\n      addNotification({ \n        type: 'error', \n        message: `Error loading customers for route ${routeNum}: ${error.message}` \n      });\n      throw error;\n    }\n  };\n\n  // Product methods\n  const updateCustomerProducts = (customerId, products) => {\n    setCustomerProducts(prev => ({ ...prev, [customerId]: products }));\n    addNotification({ \n      type: 'success', \n      message: `Updated ${products.length} products for customer.` \n    });\n  };\n\n  const searchItems = async (query) => {\n    try {\n      return await ApiService.searchItems(query);\n    } catch (error) {\n      addNotification({ \n        type: 'error', \n        message: `Error searching items: ${error.message}` \n      });\n      throw error;\n    }\n  };\n\n  // Route stop management\n  const addRouteStop = async (routeData) => {\n    try {\n      const result = await ApiService.addRouteStop(routeData);\n      addNotification({ \n        type: 'success', \n        message: `Added new stop to route ${routeData.route}.` \n      });\n      return result;\n    } catch (error) {\n      addNotification({ \n        type: 'error', \n        message: `Error adding route stop: ${error.message}` \n      });\n      throw error;\n    }\n  };\n\n  const updateRouteStop = async (routeData) => {\n    try {\n      const result = await ApiService.updateRouteStop(routeData);\n      addNotification({ \n        type: 'success', \n        message: `Updated stop on route ${routeData.route}.` \n      });\n      return result;\n    } catch (error) {\n      addNotification({ \n        type: 'error', \n        message: `Error updating route stop: ${error.message}` \n      });\n      throw error;\n    }\n  };\n\n  const deleteRouteStop = async (routeData) => {\n    try {\n      const result = await ApiService.deleteRouteStop(routeData);\n      addNotification({ \n        type: 'success', \n        message: `Removed stop from route ${routeData.route}.` \n      });\n      return result;\n    } catch (error) {\n      addNotification({ \n        type: 'error', \n        message: `Error deleting route stop: ${error.message}` \n      });\n      throw error;\n    }\n  };\n\n  return (\n    <AppContext.Provider value={{\n      // API status\n      apiStatus,\n      checkApiHealth,\n\n      // Notifications\n      notifications,\n      addNotification,\n\n      // Customer data\n      customers,\n      addCustomer,\n      updateCustomer,\n      deleteCustomer,\n\n      // Product data\n      customerProducts,\n      updateCustomerProducts,\n      searchItems,\n\n      // Route data\n      routes,\n      fetchRouteRequirements,\n      fetchRouteCustomers, \n      addRouteStop,\n      updateRouteStop,\n      deleteRouteStop\n    }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n\nexport const useApp = () => useContext(AppContext);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}